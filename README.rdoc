= Emjay

Let's talk a bit about templating in the JavaScript world. Right now no good standard exists. Many of the templating systems people have creating assume that the templating engine can directly return the computed value. Mustache.js, though admirable, uses <tt>{{</tt> and <tt>}}</tt> for its delimiters, a character sequence which can naturally occur in JavaScript.

I've set out to solve the problem of asynchronous requirements, making those easy to deal with and natural, easy-to-type delimiters.

== Delimiters

In Emjay, there are three types of delimiters.

=== Direct output

* <tt>[= -]</tt> - This is for simple outputting. Values can be computed and outputted, or variables bound at run-time can be accessed. This method performs HTML escaping. 

==== Example
  
  [- // Outputting a variable passed into the template. -]
  [=title-]
  
This would render the <tt>title</tt> variable directly into the page. It would be escaped.

=== Async block

* <tt>[== -]</tt> - This is for asynchronous interaction. A special variable, <tt>__result</tt> is available within this block. <tt>__result</tt> has the following methods:
  * <tt>write</tt> - This allows you to write raw content to the template which will later be eval'ed. Use with extreme caution. It returns the <tt>__result</tt> object.
  * <tt>append</tt> - This allows you to output a string. It returns the <tt>__result</tt> object.
  * <tt>done</tt> - This allows you to mark your block as done and continue compilation of the template. Nothing should be done after calling this method.

As well, the bindings passing into the template are available as <tt>__bindings</tt>.

==== Example
  
  [- // read a file, and output it. -]
  [==Posix.cat('myfile.txt', function(contents) { __result.append(contents).done() })-]
  
This would load myfile.txt, and output it entire contents in place.

=== Running code

* <tt>[- -]</tt> - This allows you to write JavaScript code that will be evaluated, but not output.

You can still output if you really want to though as seen in the example.

==== Example

  [- // Outputting a variable passed into the template. -]
  [- this.append('<testing>') -]

This would add <tt>&lt;testing&gt;</tt> into the page.

== String tainting

All strings can be made safe by calling <tt>makeSafe()</tt> on them. This returns a SafeString object, which will not get escaped.

=== Example
  
  [- // Outputting a variable passed into the template. -]
  [=title.makeSafe()-]
  
This would perform no escaping on the <tt>title</tt> variable.

== Node.js

A more thorough node.js based example in available in the examples directory.

== API

